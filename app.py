import streamlit as st
from google import genai
from google.genai.errors import APIError
import pandas as pd
import json
import re
import time
from typing import List, Dict, Any, Optional

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
MODEL_NAME = "gemini-2.5-flash"
# DEFAULT_API_KEY –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–ª—é—á –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ st.secrets

# JSON-—Å—Ö–µ–º–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–®–∞–≥ 5)
SOV_ANALYSIS_SCHEMA = {
    "type": "ARRAY",
    "description": "A ranked list of up to 3 brands from the provided competitor list that are clearly recommended, ordered by their prominence/rank (most prominent/first mention is index 0). Each entry must include the brand name and the associated sentiment.",
    "items": {
        "type": "OBJECT",
        "properties": {
            "brandName": {
                "type": "STRING",
                "description": "The brand name, exactly as provided in the '–°–ü–ò–°–û–ö_–ë–†–ï–ù–î–û–í'."
            },
            "sentiment": {
                "type": "STRING",
                "enum": ["Positive", "Neutral", "Negative"],
                "description": "The sentiment associated with the brand's mention in the text (Positive, Neutral, or Negative)."
            }
        },
        "required": ["brandName", "sentiment"],
        "propertyOrdering": ["brandName", "sentiment"]
    }
}

# --- –§—É–Ω–∫—Ü–∏–∏ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API (—Å –û–±—Ä–∞–±–æ—Ç–∫–æ–π –û—à–∏–±–æ–∫ –∏ –ü–æ–≤—Ç–æ—Ä–∞–º–∏) ---

def generate_content_with_retry(
    client: genai.Client,
    prompt: str,
    system_instruction: Optional[str] = None,
    max_retries: int = 3,
    json_output: bool = False,
    response_schema: Optional[Dict[str, Any]] = None
) -> str | None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ Gemini API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, 
    —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON-–≤—ã–≤–æ–¥–∞.
    """
    for attempt in range(max_retries):
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            config_params = {}
            if json_output:
                config_params["response_mime_type"] = "application/json"
                # Use the complex schema if provided, otherwise a simple array of strings
                config_params["response_schema"] = response_schema if response_schema else {"type": "ARRAY", "items": {"type": "STRING"}}
            
            if system_instruction:
                config_params["system_instruction"] = system_instruction

            # –í—ã–∑–æ–≤ API
            response = client.models.generate_content(
                model=MODEL_NAME,
                contents=prompt,
                config=genai.types.GenerateContentConfig(**config_params)
            )

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            if response.candidates and response.candidates[0].content:
                return response.candidates[0].content.parts[0].text
            
            st.warning(f"Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}.")
            return None

        except APIError as e:
            st.error(f"–û—à–∏–±–∫–∞ API (–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt
                st.warning(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
            else:
                return None
        except Exception as e:
            st.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            return None
    return None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –°–æ—Å—Ç–æ—è–Ω–∏—è Streamlit ---

if 'step' not in st.session_state:
    st.session_state.step = 1
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è brand –∏ industry, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å AttributeError
if 'brand' not in st.session_state: 
    st.session_state.brand = ''
if 'industry' not in st.session_state: 
    st.session_state.industry = ''
    
if 'user_queries' not in st.session_state:
    st.session_state.user_queries = ""
if 'competitors' not in st.session_state:
    st.session_state.competitors = ""
if 'results' not in st.session_state:
    st.session_state.results = None
if 'client' not in st.session_state:
    st.session_state.client = None
if 'analysis_details' not in st.session_state:
    st.session_state.analysis_details = [] # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if 'raw_responses' not in st.session_state:
    st.session_state.raw_responses = [] # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ Gemini

# --- UI –∏ –õ–æ–≥–∏–∫–∞ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

st.set_page_config(
    page_title="AI Share of Voice (SoV) Analyzer MVP",
    layout="centered"
)

st.title("üó£Ô∏è AI Share of Voice (SoV) –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (v3.0 - –ü–æ–∑–∏—Ü–∏—è –∏ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)")
st.markdown("–ò–∑–º–µ—Ä—å—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ Gemini —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤–∞—à –±—Ä–µ–Ω–¥ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è **—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM-–∞–Ω–∞–ª–∏–∑** –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.")

# --- –®–∞–≥ 1: –í–≤–æ–¥ –î–∞–Ω–Ω—ã—Ö ---

st.header("–®–∞–≥ 1: –í–≤–æ–¥ –ù–∞—Å—Ç—Ä–æ–µ–∫")
st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")

with st.expander("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", expanded=True):
    
    st.markdown("""
    **API Key:** –ö–ª—é—á –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ `.streamlit/secrets.toml`.
    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Ñ–∞–π–ª `secrets.toml` —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º `GEMINI_API_KEY`:
    ```toml
    GEMINI_API_KEY = "–í–ê–®_–°–ï–ö–†–ï–¢–ù–´–ô_–ö–õ–Æ–ß"
    ```
    """)
    
    brand = st.text_input(
        "–í–∞—à –ë—Ä–µ–Ω–¥ (YOUR_BRAND_NAME)", 
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ reruns
        value=st.session_state.brand if st.session_state.brand else 'AI-SaaS Tracker Pro',
        help="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ."
    )
    industry = st.text_area(
        "–û–ø–∏—Å–∞–Ω–∏–µ –ò–Ω–¥—É—Å—Ç—Ä–∏–∏ (INDUSTRY_DESCRIPTION)", 
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ reruns
        value=st.session_state.industry if st.session_state.industry else '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ AI-—Ä–µ—à–µ–Ω–∏–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ SaaS.',
        help="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞/—Ä—ã–Ω–∫–∞."
    )

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –®–∞–≥—É 2"):
        
        # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å: –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ –∏–∑ secrets ---
        if "GEMINI_API_KEY" not in st.secrets:
            st.error("–û—à–∏–±–∫–∞: –ö–ª—é—á 'GEMINI_API_KEY' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .streamlit/secrets.toml. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            # –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª —Å—Ç–∞—Ä—ã–π —Ö–∞—Ä–¥–∫–æ–¥ (—Ö–æ—Ç—è –æ–Ω —É–¥–∞–ª–µ–Ω, —ç—Ç–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            if "YOUR_GEMINI_API_KEY_HERE" in st.secrets.get("GEMINI_API_KEY", ""):
                 st.warning("–ü–æ—Ö–æ–∂–µ, –≤ `secrets.toml` –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª—é—á-–∑–∞–≥–ª—É—à–∫–∞. –ó–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ.")
            
            # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
            pass
        else:
            api_key_to_use = st.secrets["GEMINI_API_KEY"]
            
            if brand and industry:
                try:
                    st.session_state.client = genai.Client(api_key=api_key_to_use)
                    # –û–±–Ω–æ–≤–ª—è–µ–º session_state –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                    st.session_state.brand = brand
                    st.session_state.industry = industry
                    st.session_state.step = 2
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –∫–ª—é—á 'GEMINI_API_KEY' –≤ secrets.toml.")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è '–ë—Ä–µ–Ω–¥' –∏ '–ò–Ω–¥—É—Å—Ç—Ä–∏—è'.")

if st.session_state.step >= 2:
    st.divider()

    # --- –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –ó–∞–ø—Ä–æ—Å–æ–≤ ---

    st.header("–®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ó–∞–ø—Ä–æ—Å–æ–≤")
    st.markdown("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ **5** —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä—è–º—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.")
    
    # ... (–õ–æ–≥–∏–∫–∞ –®–∞–≥–∞ 2 –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ –ó–∞–ø—Ä–æ—Å—ã", disabled=st.session_state.step != 2):
        if st.session_state.client:
            with st.spinner("Gemini –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã..."):
                prompt = (
                    f"–ù–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–µ–Ω–¥–∞ '{st.session_state.brand}' –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ '{st.session_state.industry}', "
                    f"—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –∏—â—É—â–∏—Ö –ø—Ä—è–º—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "
                    f"'–ª—É—á—à–∏–π [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]', '–ø–æ—Å–æ–≤–µ—Ç—É–π [–∫–∞—Ç–µ–≥–æ—Ä–∏—é]'). –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ JSON-—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫."
                )
                
                json_response = generate_content_with_retry(
                    st.session_state.client, 
                    prompt, 
                    json_output=True
                )
                
                if json_response:
                    try:
                        queries = json.loads(json_response)
                        if isinstance(queries, list) and all(isinstance(q, str) for q in queries):
                            st.session_state.user_queries = "\n".join(queries)
                            st.session_state.step = 3
                            st.success("–ó–∞–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –®–∞–≥—É 3.")
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.")
                    except json.JSONDecodeError:
                        st.error(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON. –û—Ç–≤–µ—Ç Gemini: {json_response[:200]}...")
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã.")

    if st.session_state.step >= 3:
        st.subheader("–§–∏–Ω–∞–ª—å–Ω—ã–µ –ó–∞–ø—Ä–æ—Å—ã (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):")
        st.session_state.user_queries = st.text_area(
            "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–æ–∫—É):", 
            value=st.session_state.user_queries,
            height=150
        )
        final_queries = [q.strip() for q in st.session_state.user_queries.split('\n') if q.strip()]
        
        st.caption(f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(final_queries)}")
    
    if st.session_state.step >= 3:
        st.divider()

        # --- –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ ---
        
        st.header("–®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
        st.markdown("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.")

        if not final_queries:
            st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –®–∞–≥–µ 2.")
        else:
            first_query = final_queries[0]
            st.markdown(f"**–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –∑–∞–ø—Ä–æ—Å:** `{first_query}`")

            # ... (–õ–æ–≥–∏–∫–∞ –®–∞–≥–∞ 3 –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
            if st.button("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", disabled=st.session_state.step != 3):
                if st.session_state.client:
                    with st.spinner("Gemini –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤..."):
                        prompt = (
                            f"–û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å '{first_query}'. –í–∫–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 5-7 –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ "
                            f"—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–∫–ª—é—á–∞—è –±—Ä–µ–Ω–¥ {st.session_state.brand}. "
                            f"–í—ã–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ë—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏."
                        )

                        response = generate_content_with_retry(
                            st.session_state.client, 
                            prompt
                        )
                        
                        if response:
                            competitor_list = [c.strip() for c in response.split(',') if c.strip()]
                            unique_brands = set()
                            unique_brands.add(st.session_state.brand.strip())
                            
                            for brand_name in competitor_list:
                                cleaned_brand = re.sub(r'["\'*]', '', brand_name).strip()
                                if cleaned_brand:
                                    unique_brands.add(cleaned_brand)

                            st.session_state.competitors = ", ".join(sorted(list(unique_brands)))
                            st.session_state.step = 4
                            st.success("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –®–∞–≥—É 4.")
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.")

            if st.session_state.step >= 4:
                st.subheader("–§–∏–Ω–∞–ª—å–Ω—ã–π –°–ø–∏—Å–æ–∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ë—Ä–µ–Ω–¥–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
                st.session_state.competitors = st.text_area(
                    "–°–ø–∏—Å–æ–∫ –ë—Ä–µ–Ω–¥–æ–≤:", 
                    value=st.session_state.competitors,
                    height=100,
                    help="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –±—Ä–µ–Ω–¥ –≤–∫–ª—é—á–µ–Ω. –ë—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏."
                )
                
                final_competitors = [c.strip() for c in st.session_state.competitors.split(',') if c.strip()]
                st.caption(f"–ë—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –±—Ä–µ–Ω–¥–æ–≤: {len(final_competitors)}")

            if st.session_state.step >= 4:
                st.divider()

                # --- –®–∞–≥ 4: –°–±–æ—Ä –û—Ç–≤–µ—Ç–æ–≤ Gemini ---

                st.header("–®–∞–≥ 4: –°–±–æ—Ä –û—Ç–≤–µ—Ç–æ–≤ Gemini")
                st.info("–ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç Gemini –Ω–∞ –≤—Å–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")
                
                if st.button("–ü–æ–ª—É—á–∏—Ç—å –û—Ç–≤–µ—Ç—ã Gemini", disabled=st.session_state.step != 4):
                    if not final_queries:
                        st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
                    elif st.session_state.client:
                        st.session_state.raw_responses = [] # –°–±—Ä–æ—Å
                        N = len(final_queries)
                        progress_bar = st.progress(0, text="–ò–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤...")

                        for i, query in enumerate(final_queries):
                            progress_value = (i + 1) / N
                            progress_bar.progress(progress_value, text=f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å {i+1}/{N}")
                            
                            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º grounding tool, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ LLM
                            answer_text = generate_content_with_retry(
                                st.session_state.client, 
                                prompt=query, 
                                max_retries=2
                            )
                            
                            if answer_text:
                                st.session_state.raw_responses.append({'query': query, 'answer': answer_text})
                            else:
                                st.session_state.raw_responses.append({'query': query, 'answer': "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API"})
                            
                        progress_bar.progress(1.0, text="–°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        st.success(f"–°–æ–±—Ä–∞–Ω–æ {len(st.session_state.raw_responses)} –æ—Ç–≤–µ—Ç–æ–≤. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –®–∞–≥—É 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                        st.session_state.step = 5 # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É –®–∞–≥—É 5
                        st.rerun()


            if st.session_state.step >= 5:
                st.divider()
                
                # --- –®–∞–≥ 5: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑ –∏ –†–∞—Å—á–µ—Ç AI SoV ---

                st.header("–®–∞–≥ 5: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑ AI SoV (–ü–æ–∑–∏—Ü–∏—è –∏ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)")
                st.info(f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {len(st.session_state.raw_responses)} —Å—ã—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ Gemini –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Share of Voice.")
                
                # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–î–∞–Ω–Ω—ã–µ –¥–ª—è –®–∞–≥–∞ 5, –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ —Å—é–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏) ---
                if st.session_state.raw_responses:
                    st.subheader("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ê–Ω–∞–ª–∏–∑–∞ (–°—ã—Ä—ã–µ –û—Ç–≤–µ—Ç—ã –∏–∑ –®–∞–≥–∞ 4)")
                    st.caption("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã. –ê–Ω–∞–ª–∏–∑ LLM –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
                    for i, item in enumerate(st.session_state.raw_responses):
                        with st.expander(f"–û—Ç–≤–µ—Ç {i+1}: {item['query'][:60]}..."):
                            st.code(item['answer'], language='markdown')


                if st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑ –∏ –†–∞—Å—á–µ—Ç SoV", disabled=st.session_state.step != 5 or not st.session_state.raw_responses):
                    if not final_competitors:
                        st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ –®–∞–≥–µ 3.")
                    elif st.session_state.client and st.session_state.raw_responses:
                        
                        # --- –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –°–ß–ï–¢–ê –ò –ú–ù–û–ñ–ò–¢–ï–õ–ï–ô ---
                        # Base Position Score
                        POSITION_SCORES = {
                            0: 3.0, # 1st place
                            1: 2.0, # 2nd place
                            2: 1.0, # 3rd place
                            # Brands ranked below 3rd are not scored via structured output.
                        }
                        # Sentiment Multipliers
                        SENTIMENT_MULTIPLIERS = {
                            "Positive": 1.5,
                            "Neutral": 1.0,
                            "Negative": 0.0
                        }
                        # -------------------------------------------
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
                        brand_scores: Dict[str, float] = {brand.strip(): 0.0 for brand in final_competitors}
                        total_tracked_score = 0.0 # –û–±—â–∏–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç –≤—Å–µ—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
                        
                        st.session_state.analysis_details = [] # –°–±—Ä–æ—Å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                        
                        N = len(st.session_state.raw_responses)
                        TotalSteps = N 
                        progress_bar = st.progress(0, text="–ò–¥–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")

                        for i, item in enumerate(st.session_state.raw_responses):
                            query = item['query']
                            answer_text = item['answer']
                            
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
                            if answer_text == "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API":
                                st.session_state.analysis_details.append({
                                    '–ó–∞–ø—Ä–æ—Å': query,
                                    '–û—Ç–≤–µ—Ç Gemini': answer_text,
                                    '–ê–Ω–∞–ª–∏–∑ (–ü–æ–∑–∏—Ü–∏—è, –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –°—á–µ—Ç)': "–û—à–∏–±–∫–∞",
                                    '–û–±—â–∏–π –°—á–µ—Ç –ó–∞–ø—Ä–æ—Å–∞': 0.0
                                })
                                continue

                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            progress_value = (i + 1) / TotalSteps
                            progress_bar.progress(progress_value, text=f"–ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {i+1}/{N}")

                            # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—Ä–µ–Ω–¥–æ–≤ (LLM-–∞–Ω–∞–ª–∏–∑)
                            system_instruction_analysis = (
                                "–í—ã ‚Äî –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–π –¥–≤–∏–∂–æ–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π. "
                                "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π '–¢–ï–ö–°–¢_–î–õ–Ø_–ê–ù–ê–õ–ò–ó–ê' (—Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç Gemini). "
                                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –∏–∑ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ '–°–ü–ò–°–û–ö_–ë–†–ï–ù–î–û–í' (–≤–∫–ª—é—á–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π) —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –∏–ª–∏ "
                                "–Ω–∞–∏–±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ, –∏ –≤–µ—Ä–Ω—É—Ç—å –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏/—Ä–∞–Ω–≥–∞ (–º–∞–∫—Å–∏–º—É–º 3). "
                                "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ —Ç–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (Positive, Neutral, –∏–ª–∏ Negative). "
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –°–¢–†–û–ì–û –∏–∑ '–°–ü–ò–°–û–ö_–ë–†–ï–ù–î–û–í'. –í—ã–≤–µ–¥–∏—Ç–µ –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç, —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ. –ù–µ –≤—ã–≤–æ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç."
                            )
                            
                            analysis_prompt = (
                                f"–¢–ï–ö–°–¢_–î–õ–Ø_–ê–ù–ê–õ–ò–ó–ê: '''{answer_text}'''\n\n"
                                f"–°–ü–ò–°–û–ö_–ë–†–ï–ù–î–û–í: {final_competitors}"
                            )
                            
                            json_analysis_response = generate_content_with_retry(
                                st.session_state.client,
                                analysis_prompt,
                                system_instruction=system_instruction_analysis,
                                json_output=True,
                                response_schema=SOV_ANALYSIS_SCHEMA # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ö–µ–º—É
                            )
                            
                            current_query_score = 0.0
                            detected_brands_details = [] # [{'brandName': 'X', 'sentiment': 'Y', 'score': Z}]
                            
                            if json_analysis_response:
                                try:
                                    ranked_brands_data = json.loads(json_analysis_response)
                                    
                                    if isinstance(ranked_brands_data, list):
                                        for rank, brand_entry in enumerate(ranked_brands_data):
                                            
                                            brand_name_ranked = brand_entry.get('brandName', '').strip()
                                            sentiment = brand_entry.get('sentiment', 'Neutral').strip()
                                            
                                            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–ª
                                            base_score = POSITION_SCORES.get(rank, 0.0) # 0.0, –µ—Å–ª–∏ —Ä–∞–Ω–≥ > 2
                                            
                                            # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
                                            multiplier = SENTIMENT_MULTIPLIERS.get(sentiment, 1.0)
                                            
                                            # 3. –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
                                            final_score = base_score * multiplier

                                            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                                            if brand_name_ranked in final_competitors and final_score > 0:
                                                
                                                brand_scores[brand_name_ranked] += final_score
                                                current_query_score += final_score
                                                
                                                detected_brands_details.append({
                                                    'brandName': brand_name_ranked,
                                                    'sentiment': sentiment,
                                                    'score': round(final_score, 2)
                                                })
                                                
                                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç, –µ—Å–ª–∏ –±—ã–ª –∑–∞—Å—á–∏—Ç–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±—Ä–µ–Ω–¥
                                        if current_query_score > 0:
                                            total_tracked_score += current_query_score

                                except json.JSONDecodeError:
                                    st.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                                
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                            details_text = "\n".join([
                                f"  - {d['brandName']}: –ü–æ–∑–∏—Ü–∏—è {rank+1 if rank < 3 else '–Ω/–¥'}, –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å '{d['sentiment']}', –°—á–µ—Ç: {d['score']}"
                                for rank, d in enumerate(detected_brands_details)
                            ])
                            if not details_text:
                                details_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –°—á–µ—Ç 0"
                                
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –æ—Ç—á–µ—Ç
                            st.session_state.analysis_details.append({
                                '–ó–∞–ø—Ä–æ—Å': query,
                                '–û—Ç–≤–µ—Ç Gemini': answer_text, 
                                '–ê–Ω–∞–ª–∏–∑ (–ü–æ–∑–∏—Ü–∏—è, –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –°—á–µ—Ç)': details_text,
                                '–û–±—â–∏–π –°—á–µ—Ç –ó–∞–ø—Ä–æ—Å–∞': round(current_query_score, 2)
                            })
                            
                        progress_bar.progress(1.0, text="–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        st.success("–ê–Ω–∞–ª–∏–∑ Share of Voice –∑–∞–≤–µ—Ä—à–µ–Ω!")

                        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        final_data = []
                        for brand_name_original in final_competitors:
                            score = brand_scores.get(brand_name_original, 0.0)
                            
                            # –†–∞—Å—á–µ—Ç SoV
                            sov = 0.0
                            if total_tracked_score > 0:
                                sov = (score / total_tracked_score) * 100
                            
                            final_data.append({
                                "–ë—Ä–µ–Ω–¥": brand_name_original.strip(),
                                "–ò—Ç–æ–≥–æ–≤—ã–π –°—á–µ—Ç (Total Weighted Score)": round(score, 2),
                                "AI Share of Voice (%)": round(sov, 2)
                            })
                        
                        st.session_state.results = pd.DataFrame(final_data).sort_values(
                            by=["–ò—Ç–æ–≥–æ–≤—ã–π –°—á–µ—Ç (Total Weighted Score)", "AI Share of Voice (%)"], 
                            ascending=False
                        ).reset_index(drop=True)
                        st.session_state.step = 6 # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —à–∞–≥—É
                        st.rerun()


            if st.session_state.step == 6 and st.session_state.results is not None:
                
                st.divider()
                
                # --- –®–∞–≥ 6: –í—ã–≤–æ–¥ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
                st.header("–®–∞–≥ 6: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI Share of Voice")
                
                # –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞
                your_brand_name = st.session_state.brand.strip()
                your_brand_row = st.session_state.results[st.session_state.results["–ë—Ä–µ–Ω–¥"] == your_brand_name]
                
                if not your_brand_row.empty:
                    st.metric(
                        label=f"–í–∞—à AI SoV ({your_brand_name})", 
                        value=f'{your_brand_row["AI Share of Voice (%)"].iloc[0]}%'
                    )
                    
                st.subheader("–°–≤–æ–¥–Ω–∞—è –¢–∞–±–ª–∏—Ü–∞ AI SoV")
                st.dataframe(st.session_state.results, use_container_width=True)

                # –ü—É–Ω–∫—Ç 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                st.subheader("–ü–æ–¥—Ä–æ–±–Ω—ã–π –û—Ç—á–µ—Ç –∏ –û—Ç–≤–µ—Ç—ã Gemini (–ø–æ –¥–∞–Ω–Ω—ã–º –®–∞–≥–∞ 5)")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–µ—Å–æ–≤ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è
                st.markdown("""
                **–°–∏—Å—Ç–µ–º–∞ –í–∑–≤–µ—à–∏–≤–∞–Ω–∏—è:**
                | –ö—Ä–∏—Ç–µ—Ä–∏–π | –ü–æ–∑–∏—Ü–∏—è (–ë–∞–∑–æ–≤—ã–π –°—á–µ—Ç) | –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–ú–Ω–æ–∂–∏—Ç–µ–ª—å) |
                | :--- | :--- | :--- |
                | **ü•á 1-—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è** | 3.0 | –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è **$\times 1.5$** |
                | **ü•à 2-—è –ø–æ–∑–∏—Ü–∏—è** | 2.0 | –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è **$\times 1.0$** |
                | **ü•â 3-—è –ø–æ–∑–∏—Ü–∏—è** | 1.0 | –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è **$\times 0.0$** |
                """)
                st.caption("–ò—Ç–æ–≥–æ–≤—ã–π –°—á–µ—Ç = –ë–∞–∑–æ–≤—ã–π –°—á–µ—Ç $\times$ –ú–Ω–æ–∂–∏—Ç–µ–ª—å. –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∏–∂–µ 3-–π –ø–æ–∑–∏—Ü–∏–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ.")
                
                for detail in st.session_state.analysis_details:
                    with st.expander(f"–ó–∞–ø—Ä–æ—Å: {detail['–ó–∞–ø—Ä–æ—Å'][:60]}... (–°—á–µ—Ç: {detail['–û–±—â–∏–π –°—á–µ—Ç –ó–∞–ø—Ä–æ—Å–∞']})"):
                        st.markdown(f"**–ó–∞–ø—Ä–æ—Å:** `{detail['–ó–∞–ø—Ä–æ—Å']}`")
                        st.markdown(f"**–û–±—â–∏–π –°—á–µ—Ç –ó–∞–ø—Ä–æ—Å–∞:** `{detail['–û–±—â–∏–π –°—á–µ—Ç –ó–∞–ø—Ä–æ—Å–∞']}`")
                        st.markdown(f"**–î–µ—Ç–∞–ª–∏ –ê–Ω–∞–ª–∏–∑–∞:**")
                        st.code(detail['–ê–Ω–∞–ª–∏–∑ (–ü–æ–∑–∏—Ü–∏—è, –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –°—á–µ—Ç)'], language='markdown')
                        st.markdown("---")
                        st.markdown("**–ü–æ–ª–Ω—ã–π –û—Ç–≤–µ—Ç Gemini:**")
                        st.code(detail['–û—Ç–≤–µ—Ç Gemini'], language='markdown')


# --- –û–±—â–µ–µ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ü–æ—è—Å–Ω–µ–Ω–∏—è) ---

if st.session_state.step == 1:
    st.info("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á (–∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–¥–µ), –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
elif st.session_state.step == 2:
    st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ –ó–∞–ø—Ä–æ—Å—ã' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
elif st.session_state.step == 3:
    st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'.")
elif st.session_state.step == 4:
    st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –û—Ç–≤–µ—Ç—ã Gemini'.")
elif st.session_state.step == 5:
    st.info("–û—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—ã—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Å—Ç–∏ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑ –∏ –†–∞—Å—á–µ—Ç SoV'.")
elif st.session_state.step == 6:
    st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥—Ä–æ–±–Ω—ã–π –û—Ç—á–µ—Ç'.")

# –§—É—Ç–µ—Ä
st.sidebar.markdown("---")
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Å—Ç–æ–π –±—Ä–µ–Ω–¥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if st.session_state.brand:
    st.sidebar.markdown(f"**–í–∞—à –ë—Ä–µ–Ω–¥:** `{st.session_state.brand}`")
else:
    st.sidebar.markdown(f"**–í–∞—à –ë—Ä–µ–Ω–¥:** *–ù–µ –∑–∞–¥–∞–Ω*")
    
st.sidebar.markdown(f"**–¢–µ–∫—É—â–∏–π –ú–æ–¥–µ–ª—å:** `{MODEL_NAME}`")
st.sidebar.markdown(f"**–¢–µ–∫—É—â–∏–π –®–∞–≥:** –®–∞–≥ {st.session_state.step}")
